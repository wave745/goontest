'use client';
import { useState, useEffect } from 'react';
import { useWallet } from '@solana/wallet-adapter-react';
import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import MobileNav from '@/components/MobileNav';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Play, 
  Square, 
  Settings, 
  Copy, 
  Check, 
  Loader2, 
  Wifi, 
  WifiOff,
  Users,
  Eye,
  Heart,
  MessageCircle,
  Share2,
  Zap,
  Crown,
  AlertCircle,
  Info
} from 'lucide-react';
import { supabase, createPost, type Post } from '@/lib/supabase';
import { toast } from '@/hooks/use-toast';

type StreamStatus = 'idle' | 'starting' | 'live' | 'ending';

export default function Studio() {
  const { connected, publicKey } = useWallet();
  const [streamStatus, setStreamStatus] = useState<StreamStatus>('idle');
  const [streamTitle, setStreamTitle] = useState('');
  const [streamDescription, setStreamDescription] = useState('');
  const [streamKey, setStreamKey] = useState('');
  const [streamUrl, setStreamUrl] = useState('');
  const [viewerCount, setViewerCount] = useState(0);
  const [isGeneratingKey, setIsGeneratingKey] = useState(false);
  const [activeTab, setActiveTab] = useState('stream');

  // Generate stream key and URL
  const generateStreamKey = async () => {
    if (!publicKey) return;

    try {
      setIsGeneratingKey(true);
      
      // In a real implementation, this would call Livepeer API
      // For now, we'll generate a mock stream key
      const mockKey = `goon_${publicKey.toBase58().slice(0, 8)}_${Date.now()}`;
      const mockUrl = `rtmp://live.goonhub.com/live/${mockKey}`;
      
      setStreamKey(mockKey);
      setStreamUrl(mockUrl);
      
      toast({
        title: "Stream Key Generated",
        description: "Your stream key has been generated successfully",
      });
    } catch (error) {
      console.error('Error generating stream key:', error);
      toast({
        title: "Error",
        description: "Failed to generate stream key",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingKey(false);
    }
  };

  // Start live stream
  const startStream = async () => {
    if (!connected || !publicKey) {
      toast({
        title: "Wallet not connected",
        description: "Please connect your wallet to start streaming",
        variant: "destructive",
      });
      return;
    }

    if (!streamTitle.trim()) {
      toast({
        title: "Missing title",
        description: "Please enter a stream title",
        variant: "destructive",
      });
      return;
    }

    if (!streamKey) {
      toast({
        title: "No stream key",
        description: "Please generate a stream key first",
        variant: "destructive",
      });
      return;
    }

    try {
      setStreamStatus('starting');

      // Create live stream post using API
      const response = await fetch('http://localhost:5000/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          creator_id: publicKey.toBase58(),
          media_url: streamUrl, // In real implementation, this would be the Livepeer playback URL
          thumb_url: '', // Will be generated by Livepeer
          caption: streamTitle + (streamDescription ? `\n\n${streamDescription}` : ''),
          price_lamports: 0, // Free stream
          visibility: 'public',
          status: 'published',
          tags: ['live', 'streaming'],
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to create stream post');
      }

      setStreamStatus('live');
      setViewerCount(0);
      
      toast({
        title: "Stream Started!",
        description: "Your live stream is now live on GoonHub",
      });

      // Simulate viewer count updates
      const interval = setInterval(() => {
        setViewerCount(prev => prev + Math.floor(Math.random() * 3));
      }, 3000);

      return () => clearInterval(interval);
    } catch (error) {
      console.error('Error starting stream:', error);
      setStreamStatus('idle');
      toast({
        title: "Error",
        description: "Failed to start stream",
        variant: "destructive",
      });
    }
  };

  // End live stream
  const endStream = async () => {
    try {
      setStreamStatus('ending');

      // In a real implementation, this would call Livepeer API to end the stream
      // and update the post in Supabase
      
      setStreamStatus('idle');
      setViewerCount(0);
      
      toast({
        title: "Stream Ended",
        description: "Your live stream has been ended",
      });
    } catch (error) {
      console.error('Error ending stream:', error);
      toast({
        title: "Error",
        description: "Failed to end stream",
        variant: "destructive",
      });
    }
  };

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied",
      description: `${label} copied to clipboard`,
    });
  };

  if (!connected) {
    return (
      <div className="min-h-screen bg-background">
        <Header />
        <div className="flex">
          <Sidebar />
          <main className="flex-1 p-4 md:p-6">
            <div className="max-w-4xl mx-auto">
              <div className="text-center py-12">
                <Crown className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
                <h1 className="text-2xl font-bold text-foreground mb-2">Connect Your Wallet</h1>
                <p className="text-muted-foreground">Please connect your wallet to access the studio.</p>
              </div>
            </div>
          </main>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <Header />
      <div className="flex">
        <Sidebar />
        <main className="flex-1 p-4 md:p-6">
          <div className="max-w-4xl mx-auto">
            {/* Header */}
            <div className="mb-8">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-accent/20">
                  <Crown className="h-6 w-6 text-accent" />
                </div>
                <h1 className="text-3xl font-bold text-foreground">Creator Studio</h1>
              </div>
              <p className="text-muted-foreground">
                Start live streaming and share your content with the world
              </p>
            </div>

            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="stream">Live Stream</TabsTrigger>
                <TabsTrigger value="settings">Settings</TabsTrigger>
                <TabsTrigger value="analytics">Analytics</TabsTrigger>
              </TabsList>

              <TabsContent value="stream" className="space-y-6">
                {/* Stream Status */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      {streamStatus === 'live' ? (
                        <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse" />
                      ) : (
                        <div className="w-3 h-3 bg-muted rounded-full" />
                      )}
                      Stream Status
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-muted-foreground mb-1">Current Status</p>
                        <Badge 
                          variant={streamStatus === 'live' ? 'destructive' : 'secondary'}
                          className={streamStatus === 'live' ? 'animate-pulse' : ''}
                        >
                          {streamStatus === 'idle' && 'Offline'}
                          {streamStatus === 'starting' && 'Starting...'}
                          {streamStatus === 'live' && 'LIVE'}
                          {streamStatus === 'ending' && 'Ending...'}
                        </Badge>
                      </div>
                      
                      {streamStatus === 'live' && (
                        <div className="text-right">
                          <p className="text-sm text-muted-foreground mb-1">Viewers</p>
                          <div className="flex items-center gap-1 text-lg font-semibold">
                            <Users className="h-4 w-4" />
                            {viewerCount}
                          </div>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Stream Configuration */}
                <Card>
                  <CardHeader>
                    <CardTitle>Stream Configuration</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="title">Stream Title *</Label>
                      <Input
                        id="title"
                        value={streamTitle}
                        onChange={(e) => setStreamTitle(e.target.value)}
                        placeholder="Enter your stream title"
                        className="mt-1"
                        disabled={streamStatus === 'live'}
                      />
                    </div>

                    <div>
                      <Label htmlFor="description">Description</Label>
                      <Textarea
                        id="description"
                        value={streamDescription}
                        onChange={(e) => setStreamDescription(e.target.value)}
                        placeholder="Describe your stream (optional)"
                        className="mt-1"
                        rows={3}
                        disabled={streamStatus === 'live'}
                      />
                    </div>

                    {/* Stream Key Section */}
                    <div>
                      <Label>Stream Key & URL</Label>
                      <div className="mt-2 space-y-3">
                        {!streamKey ? (
                          <Button
                            onClick={generateStreamKey}
                            disabled={isGeneratingKey || streamStatus === 'live'}
                            className="w-full"
                          >
                            {isGeneratingKey ? (
                              <>
                                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                Generating...
                              </>
                            ) : (
                              'Generate Stream Key'
                            )}
                          </Button>
                        ) : (
                          <div className="space-y-3">
                            <div>
                              <Label className="text-sm">Stream Key</Label>
                              <div className="flex gap-2 mt-1">
                                <Input
                                  value={streamKey}
                                  readOnly
                                  className="font-mono text-sm"
                                />
                                <Button
                                  size="icon"
                                  variant="outline"
                                  onClick={() => copyToClipboard(streamKey, 'Stream key')}
                                >
                                  <Copy className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                            
                            <div>
                              <Label className="text-sm">RTMP URL</Label>
                              <div className="flex gap-2 mt-1">
                                <Input
                                  value={streamUrl}
                                  readOnly
                                  className="font-mono text-sm"
                                />
                                <Button
                                  size="icon"
                                  variant="outline"
                                  onClick={() => copyToClipboard(streamUrl, 'RTMP URL')}
                                >
                                  <Copy className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Stream Actions */}
                    <div className="flex gap-3 pt-4">
                      {streamStatus === 'idle' ? (
                        <Button
                          onClick={startStream}
                          disabled={!streamKey || !streamTitle.trim()}
                          className="flex-1 bg-accent hover:bg-accent/90"
                        >
                          <Play className="h-4 w-4 mr-2" />
                          Start Stream
                        </Button>
                      ) : streamStatus === 'live' ? (
                        <Button
                          onClick={endStream}
                          variant="destructive"
                          className="flex-1"
                        >
                          <Square className="h-4 w-4 mr-2" />
                          End Stream
                        </Button>
                      ) : (
                        <Button disabled className="flex-1">
                          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                          {streamStatus === 'starting' ? 'Starting...' : 'Ending...'}
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* OBS Setup Instructions */}
                {streamKey && (
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Settings className="h-5 w-5" />
                        OBS Studio Setup
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="p-4 bg-muted/50 rounded-lg">
                          <h4 className="font-semibold mb-2">Step 1: Open OBS Studio</h4>
                          <p className="text-sm text-muted-foreground">
                            Download and install OBS Studio from obsproject.com
                          </p>
                        </div>
                        
                        <div className="p-4 bg-muted/50 rounded-lg">
                          <h4 className="font-semibold mb-2">Step 2: Configure Stream Settings</h4>
                          <ol className="text-sm text-muted-foreground space-y-1 list-decimal list-inside">
                            <li>Go to Settings → Stream</li>
                            <li>Set Service to "Custom"</li>
                            <li>Set Server to: <code className="bg-muted px-1 rounded">{streamUrl}</code></li>
                            <li>Set Stream Key to: <code className="bg-muted px-1 rounded">{streamKey}</code></li>
                          </ol>
                        </div>
                        
                        <div className="p-4 bg-muted/50 rounded-lg">
                          <h4 className="font-semibold mb-2">Step 3: Start Streaming</h4>
                          <p className="text-sm text-muted-foreground">
                            Click "Start Streaming" in OBS, then click "Start Stream" above
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </TabsContent>

              <TabsContent value="settings" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Stream Settings</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-center py-8 text-muted-foreground">
                      <Settings className="h-12 w-12 mx-auto mb-4 opacity-50" />
                      <p>Stream settings will be available soon</p>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="analytics" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Stream Analytics</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-center py-8 text-muted-foreground">
                      <Eye className="h-12 w-12 mx-auto mb-4 opacity-50" />
                      <p>Analytics will be available soon</p>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </main>
      </div>

      {/* Mobile Navigation */}
      <MobileNav />
    </div>
  );
}
